Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    2PONTOS
    COMENTADO
    MAIOR
    MAIOROUIGUAL
    MENOR
    MENOROUIGUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations statements
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> empty
Rule 4     declaration -> ID PONTOVIRGULA
Rule 5     statements -> statements statement
Rule 6     statements -> empty
Rule 7     statement -> assignment
Rule 8     statement -> if_statement
Rule 9     statement -> while_statement
Rule 10    statement -> read_statement
Rule 11    statement -> write_statement
Rule 12    assignment -> ID IGUAL expression PONTOVIRGULA
Rule 13    condition -> expression
Rule 14    if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
Rule 15    while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
Rule 16    read_statement -> INPUT ID PONTOVIRGULA
Rule 17    write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA
Rule 18    expression -> expression PLUS term
Rule 19    expression -> expression MINUS term
Rule 20    expression -> term
Rule 21    term -> term TIMES factor
Rule 22    term -> term DIVIDE factor
Rule 23    term -> factor
Rule 24    factor -> ( expression )
Rule 25    factor -> ID
Rule 26    factor -> NUM
Rule 27    empty -> <empty>

Terminals, with rules where they appear

(                    : 24
)                    : 24
2PONTOS              : 
ASPAS                : 17 17
COMENTADO            : 
DIVIDE               : 22
ENQUANTO             : 15
ENTAO                : 14
FAZ                  : 15
FIM_COND             : 14
FIM_ENQUANTO         : 15
ID                   : 4 12 16 17 25
IGUAL                : 12
IMPRIMIR             : 17
INPUT                : 16
LPAREN               : 17
MAIOR                : 
MAIOROUIGUAL         : 
MENOR                : 
MENOROUIGUAL         : 
MINUS                : 19
NUM                  : 26
PLUS                 : 18
PONTOVIRGULA         : 4 12 14 15 16 17
RPAREN               : 17
SE                   : 14
SENAO                : 14
TIMES                : 21
VIRGULA              : 17
error                : 

Nonterminals, with rules where they appear

assignment           : 7
condition            : 14 15
declaration          : 2
declarations         : 1 2
empty                : 3 6
expression           : 12 13 17 18 19 24
factor               : 21 22 23
if_statement         : 8
program              : 0
read_statement       : 10
statement            : 5
statements           : 1 5 14 14 15
term                 : 18 19 20 21 22
while_statement      : 9
write_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations statements
    (2) declarations -> . declarations declaration
    (3) declarations -> . empty
    (27) empty -> .

    ID              reduce using rule 27 (empty -> .)
    SE              reduce using rule 27 (empty -> .)
    ENQUANTO        reduce using rule 27 (empty -> .)
    INPUT           reduce using rule 27 (empty -> .)
    IMPRIMIR        reduce using rule 27 (empty -> .)
    $end            reduce using rule 27 (empty -> .)

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations . statements
    (2) declarations -> declarations . declaration
    (5) statements -> . statements statement
    (6) statements -> . empty
    (4) declaration -> . ID PONTOVIRGULA
    (27) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 7
    SE              reduce using rule 27 (empty -> .)
    ENQUANTO        reduce using rule 27 (empty -> .)
    INPUT           reduce using rule 27 (empty -> .)
    IMPRIMIR        reduce using rule 27 (empty -> .)
    $end            reduce using rule 27 (empty -> .)

  ! ID              [ reduce using rule 27 (empty -> .) ]

    statements                     shift and go to state 4
    declaration                    shift and go to state 5
    empty                          shift and go to state 6

state 3

    (3) declarations -> empty .

    ID              reduce using rule 3 (declarations -> empty .)
    SE              reduce using rule 3 (declarations -> empty .)
    ENQUANTO        reduce using rule 3 (declarations -> empty .)
    INPUT           reduce using rule 3 (declarations -> empty .)
    IMPRIMIR        reduce using rule 3 (declarations -> empty .)
    $end            reduce using rule 3 (declarations -> empty .)


state 4

    (1) program -> declarations statements .
    (5) statements -> statements . statement
    (7) statement -> . assignment
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . read_statement
    (11) statement -> . write_statement
    (12) assignment -> . ID IGUAL expression PONTOVIRGULA
    (14) if_statement -> . SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
    (15) while_statement -> . ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
    (16) read_statement -> . INPUT ID PONTOVIRGULA
    (17) write_statement -> . IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    $end            reduce using rule 1 (program -> declarations statements .)
    ID              shift and go to state 14
    SE              shift and go to state 15
    ENQUANTO        shift and go to state 16
    INPUT           shift and go to state 17
    IMPRIMIR        shift and go to state 18

    statement                      shift and go to state 8
    assignment                     shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    read_statement                 shift and go to state 12
    write_statement                shift and go to state 13

state 5

    (2) declarations -> declarations declaration .

    ID              reduce using rule 2 (declarations -> declarations declaration .)
    SE              reduce using rule 2 (declarations -> declarations declaration .)
    ENQUANTO        reduce using rule 2 (declarations -> declarations declaration .)
    INPUT           reduce using rule 2 (declarations -> declarations declaration .)
    IMPRIMIR        reduce using rule 2 (declarations -> declarations declaration .)
    $end            reduce using rule 2 (declarations -> declarations declaration .)


state 6

    (6) statements -> empty .

    ID              reduce using rule 6 (statements -> empty .)
    SE              reduce using rule 6 (statements -> empty .)
    ENQUANTO        reduce using rule 6 (statements -> empty .)
    INPUT           reduce using rule 6 (statements -> empty .)
    IMPRIMIR        reduce using rule 6 (statements -> empty .)
    $end            reduce using rule 6 (statements -> empty .)
    SENAO           reduce using rule 6 (statements -> empty .)
    FIM_ENQUANTO    reduce using rule 6 (statements -> empty .)
    FIM_COND        reduce using rule 6 (statements -> empty .)


state 7

    (4) declaration -> ID . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 19


state 8

    (5) statements -> statements statement .

    ID              reduce using rule 5 (statements -> statements statement .)
    SE              reduce using rule 5 (statements -> statements statement .)
    ENQUANTO        reduce using rule 5 (statements -> statements statement .)
    INPUT           reduce using rule 5 (statements -> statements statement .)
    IMPRIMIR        reduce using rule 5 (statements -> statements statement .)
    $end            reduce using rule 5 (statements -> statements statement .)
    SENAO           reduce using rule 5 (statements -> statements statement .)
    FIM_ENQUANTO    reduce using rule 5 (statements -> statements statement .)
    FIM_COND        reduce using rule 5 (statements -> statements statement .)


state 9

    (7) statement -> assignment .

    ID              reduce using rule 7 (statement -> assignment .)
    SE              reduce using rule 7 (statement -> assignment .)
    ENQUANTO        reduce using rule 7 (statement -> assignment .)
    INPUT           reduce using rule 7 (statement -> assignment .)
    IMPRIMIR        reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    SENAO           reduce using rule 7 (statement -> assignment .)
    FIM_ENQUANTO    reduce using rule 7 (statement -> assignment .)
    FIM_COND        reduce using rule 7 (statement -> assignment .)


state 10

    (8) statement -> if_statement .

    ID              reduce using rule 8 (statement -> if_statement .)
    SE              reduce using rule 8 (statement -> if_statement .)
    ENQUANTO        reduce using rule 8 (statement -> if_statement .)
    INPUT           reduce using rule 8 (statement -> if_statement .)
    IMPRIMIR        reduce using rule 8 (statement -> if_statement .)
    $end            reduce using rule 8 (statement -> if_statement .)
    SENAO           reduce using rule 8 (statement -> if_statement .)
    FIM_ENQUANTO    reduce using rule 8 (statement -> if_statement .)
    FIM_COND        reduce using rule 8 (statement -> if_statement .)


state 11

    (9) statement -> while_statement .

    ID              reduce using rule 9 (statement -> while_statement .)
    SE              reduce using rule 9 (statement -> while_statement .)
    ENQUANTO        reduce using rule 9 (statement -> while_statement .)
    INPUT           reduce using rule 9 (statement -> while_statement .)
    IMPRIMIR        reduce using rule 9 (statement -> while_statement .)
    $end            reduce using rule 9 (statement -> while_statement .)
    SENAO           reduce using rule 9 (statement -> while_statement .)
    FIM_ENQUANTO    reduce using rule 9 (statement -> while_statement .)
    FIM_COND        reduce using rule 9 (statement -> while_statement .)


state 12

    (10) statement -> read_statement .

    ID              reduce using rule 10 (statement -> read_statement .)
    SE              reduce using rule 10 (statement -> read_statement .)
    ENQUANTO        reduce using rule 10 (statement -> read_statement .)
    INPUT           reduce using rule 10 (statement -> read_statement .)
    IMPRIMIR        reduce using rule 10 (statement -> read_statement .)
    $end            reduce using rule 10 (statement -> read_statement .)
    SENAO           reduce using rule 10 (statement -> read_statement .)
    FIM_ENQUANTO    reduce using rule 10 (statement -> read_statement .)
    FIM_COND        reduce using rule 10 (statement -> read_statement .)


state 13

    (11) statement -> write_statement .

    ID              reduce using rule 11 (statement -> write_statement .)
    SE              reduce using rule 11 (statement -> write_statement .)
    ENQUANTO        reduce using rule 11 (statement -> write_statement .)
    INPUT           reduce using rule 11 (statement -> write_statement .)
    IMPRIMIR        reduce using rule 11 (statement -> write_statement .)
    $end            reduce using rule 11 (statement -> write_statement .)
    SENAO           reduce using rule 11 (statement -> write_statement .)
    FIM_ENQUANTO    reduce using rule 11 (statement -> write_statement .)
    FIM_COND        reduce using rule 11 (statement -> write_statement .)


state 14

    (12) assignment -> ID . IGUAL expression PONTOVIRGULA

    IGUAL           shift and go to state 20


state 15

    (14) if_statement -> SE . condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
    (13) condition -> . expression
    (18) expression -> . expression PLUS term
    (19) expression -> . expression MINUS term
    (20) expression -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    condition                      shift and go to state 21
    expression                     shift and go to state 22
    term                           shift and go to state 23
    factor                         shift and go to state 24

state 16

    (15) while_statement -> ENQUANTO . condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
    (13) condition -> . expression
    (18) expression -> . expression PLUS term
    (19) expression -> . expression MINUS term
    (20) expression -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    condition                      shift and go to state 28
    expression                     shift and go to state 22
    term                           shift and go to state 23
    factor                         shift and go to state 24

state 17

    (16) read_statement -> INPUT . ID PONTOVIRGULA

    ID              shift and go to state 29


state 18

    (17) write_statement -> IMPRIMIR . LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    LPAREN          shift and go to state 30


state 19

    (4) declaration -> ID PONTOVIRGULA .

    ID              reduce using rule 4 (declaration -> ID PONTOVIRGULA .)
    SE              reduce using rule 4 (declaration -> ID PONTOVIRGULA .)
    ENQUANTO        reduce using rule 4 (declaration -> ID PONTOVIRGULA .)
    INPUT           reduce using rule 4 (declaration -> ID PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 4 (declaration -> ID PONTOVIRGULA .)
    $end            reduce using rule 4 (declaration -> ID PONTOVIRGULA .)


state 20

    (12) assignment -> ID IGUAL . expression PONTOVIRGULA
    (18) expression -> . expression PLUS term
    (19) expression -> . expression MINUS term
    (20) expression -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    expression                     shift and go to state 31
    term                           shift and go to state 23
    factor                         shift and go to state 24

state 21

    (14) if_statement -> SE condition . ENTAO statements SENAO statements FIM_COND PONTOVIRGULA

    ENTAO           shift and go to state 32


state 22

    (13) condition -> expression .
    (18) expression -> expression . PLUS term
    (19) expression -> expression . MINUS term

    ENTAO           reduce using rule 13 (condition -> expression .)
    FAZ             reduce using rule 13 (condition -> expression .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 23

    (20) expression -> term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIVIDE factor

    PLUS            reduce using rule 20 (expression -> term .)
    MINUS           reduce using rule 20 (expression -> term .)
    ENTAO           reduce using rule 20 (expression -> term .)
    FAZ             reduce using rule 20 (expression -> term .)
    PONTOVIRGULA    reduce using rule 20 (expression -> term .)
    )               reduce using rule 20 (expression -> term .)
    ASPAS           reduce using rule 20 (expression -> term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 24

    (23) term -> factor .

    TIMES           reduce using rule 23 (term -> factor .)
    DIVIDE          reduce using rule 23 (term -> factor .)
    PLUS            reduce using rule 23 (term -> factor .)
    MINUS           reduce using rule 23 (term -> factor .)
    ENTAO           reduce using rule 23 (term -> factor .)
    FAZ             reduce using rule 23 (term -> factor .)
    PONTOVIRGULA    reduce using rule 23 (term -> factor .)
    )               reduce using rule 23 (term -> factor .)
    ASPAS           reduce using rule 23 (term -> factor .)


state 25

    (24) factor -> ( . expression )
    (18) expression -> . expression PLUS term
    (19) expression -> . expression MINUS term
    (20) expression -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    expression                     shift and go to state 37
    term                           shift and go to state 23
    factor                         shift and go to state 24

state 26

    (25) factor -> ID .

    TIMES           reduce using rule 25 (factor -> ID .)
    DIVIDE          reduce using rule 25 (factor -> ID .)
    PLUS            reduce using rule 25 (factor -> ID .)
    MINUS           reduce using rule 25 (factor -> ID .)
    ENTAO           reduce using rule 25 (factor -> ID .)
    FAZ             reduce using rule 25 (factor -> ID .)
    PONTOVIRGULA    reduce using rule 25 (factor -> ID .)
    )               reduce using rule 25 (factor -> ID .)
    ASPAS           reduce using rule 25 (factor -> ID .)


state 27

    (26) factor -> NUM .

    TIMES           reduce using rule 26 (factor -> NUM .)
    DIVIDE          reduce using rule 26 (factor -> NUM .)
    PLUS            reduce using rule 26 (factor -> NUM .)
    MINUS           reduce using rule 26 (factor -> NUM .)
    ENTAO           reduce using rule 26 (factor -> NUM .)
    FAZ             reduce using rule 26 (factor -> NUM .)
    PONTOVIRGULA    reduce using rule 26 (factor -> NUM .)
    )               reduce using rule 26 (factor -> NUM .)
    ASPAS           reduce using rule 26 (factor -> NUM .)


state 28

    (15) while_statement -> ENQUANTO condition . FAZ statements FIM_ENQUANTO PONTOVIRGULA

    FAZ             shift and go to state 38


state 29

    (16) read_statement -> INPUT ID . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 39


state 30

    (17) write_statement -> IMPRIMIR LPAREN . ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    ASPAS           shift and go to state 40


state 31

    (12) assignment -> ID IGUAL expression . PONTOVIRGULA
    (18) expression -> expression . PLUS term
    (19) expression -> expression . MINUS term

    PONTOVIRGULA    shift and go to state 41
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 32

    (14) if_statement -> SE condition ENTAO . statements SENAO statements FIM_COND PONTOVIRGULA
    (5) statements -> . statements statement
    (6) statements -> . empty
    (27) empty -> .

    SENAO           reduce using rule 27 (empty -> .)
    ID              reduce using rule 27 (empty -> .)
    SE              reduce using rule 27 (empty -> .)
    ENQUANTO        reduce using rule 27 (empty -> .)
    INPUT           reduce using rule 27 (empty -> .)
    IMPRIMIR        reduce using rule 27 (empty -> .)

    statements                     shift and go to state 42
    empty                          shift and go to state 6

state 33

    (18) expression -> expression PLUS . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    term                           shift and go to state 43
    factor                         shift and go to state 24

state 34

    (19) expression -> expression MINUS . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    term                           shift and go to state 44
    factor                         shift and go to state 24

state 35

    (21) term -> term TIMES . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    factor                         shift and go to state 45

state 36

    (22) term -> term DIVIDE . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    factor                         shift and go to state 46

state 37

    (24) factor -> ( expression . )
    (18) expression -> expression . PLUS term
    (19) expression -> expression . MINUS term

    )               shift and go to state 47
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 38

    (15) while_statement -> ENQUANTO condition FAZ . statements FIM_ENQUANTO PONTOVIRGULA
    (5) statements -> . statements statement
    (6) statements -> . empty
    (27) empty -> .

    FIM_ENQUANTO    reduce using rule 27 (empty -> .)
    ID              reduce using rule 27 (empty -> .)
    SE              reduce using rule 27 (empty -> .)
    ENQUANTO        reduce using rule 27 (empty -> .)
    INPUT           reduce using rule 27 (empty -> .)
    IMPRIMIR        reduce using rule 27 (empty -> .)

    statements                     shift and go to state 48
    empty                          shift and go to state 6

state 39

    (16) read_statement -> INPUT ID PONTOVIRGULA .

    ID              reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    SE              reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    ENQUANTO        reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    INPUT           reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    $end            reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    SENAO           reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    FIM_ENQUANTO    reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)
    FIM_COND        reduce using rule 16 (read_statement -> INPUT ID PONTOVIRGULA .)


state 40

    (17) write_statement -> IMPRIMIR LPAREN ASPAS . expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA
    (18) expression -> . expression PLUS term
    (19) expression -> . expression MINUS term
    (20) expression -> . term
    (21) term -> . term TIMES factor
    (22) term -> . term DIVIDE factor
    (23) term -> . factor
    (24) factor -> . ( expression )
    (25) factor -> . ID
    (26) factor -> . NUM

    (               shift and go to state 25
    ID              shift and go to state 26
    NUM             shift and go to state 27

    expression                     shift and go to state 49
    term                           shift and go to state 23
    factor                         shift and go to state 24

state 41

    (12) assignment -> ID IGUAL expression PONTOVIRGULA .

    ID              reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    SE              reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    ENQUANTO        reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    INPUT           reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    $end            reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    SENAO           reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    FIM_ENQUANTO    reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)
    FIM_COND        reduce using rule 12 (assignment -> ID IGUAL expression PONTOVIRGULA .)


state 42

    (14) if_statement -> SE condition ENTAO statements . SENAO statements FIM_COND PONTOVIRGULA
    (5) statements -> statements . statement
    (7) statement -> . assignment
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . read_statement
    (11) statement -> . write_statement
    (12) assignment -> . ID IGUAL expression PONTOVIRGULA
    (14) if_statement -> . SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
    (15) while_statement -> . ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
    (16) read_statement -> . INPUT ID PONTOVIRGULA
    (17) write_statement -> . IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    SENAO           shift and go to state 50
    ID              shift and go to state 14
    SE              shift and go to state 15
    ENQUANTO        shift and go to state 16
    INPUT           shift and go to state 17
    IMPRIMIR        shift and go to state 18

    statement                      shift and go to state 8
    assignment                     shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    read_statement                 shift and go to state 12
    write_statement                shift and go to state 13

state 43

    (18) expression -> expression PLUS term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIVIDE factor

    PLUS            reduce using rule 18 (expression -> expression PLUS term .)
    MINUS           reduce using rule 18 (expression -> expression PLUS term .)
    ENTAO           reduce using rule 18 (expression -> expression PLUS term .)
    FAZ             reduce using rule 18 (expression -> expression PLUS term .)
    PONTOVIRGULA    reduce using rule 18 (expression -> expression PLUS term .)
    )               reduce using rule 18 (expression -> expression PLUS term .)
    ASPAS           reduce using rule 18 (expression -> expression PLUS term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 44

    (19) expression -> expression MINUS term .
    (21) term -> term . TIMES factor
    (22) term -> term . DIVIDE factor

    PLUS            reduce using rule 19 (expression -> expression MINUS term .)
    MINUS           reduce using rule 19 (expression -> expression MINUS term .)
    ENTAO           reduce using rule 19 (expression -> expression MINUS term .)
    FAZ             reduce using rule 19 (expression -> expression MINUS term .)
    PONTOVIRGULA    reduce using rule 19 (expression -> expression MINUS term .)
    )               reduce using rule 19 (expression -> expression MINUS term .)
    ASPAS           reduce using rule 19 (expression -> expression MINUS term .)
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36


state 45

    (21) term -> term TIMES factor .

    TIMES           reduce using rule 21 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 21 (term -> term TIMES factor .)
    PLUS            reduce using rule 21 (term -> term TIMES factor .)
    MINUS           reduce using rule 21 (term -> term TIMES factor .)
    ENTAO           reduce using rule 21 (term -> term TIMES factor .)
    FAZ             reduce using rule 21 (term -> term TIMES factor .)
    PONTOVIRGULA    reduce using rule 21 (term -> term TIMES factor .)
    )               reduce using rule 21 (term -> term TIMES factor .)
    ASPAS           reduce using rule 21 (term -> term TIMES factor .)


state 46

    (22) term -> term DIVIDE factor .

    TIMES           reduce using rule 22 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 22 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 22 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 22 (term -> term DIVIDE factor .)
    ENTAO           reduce using rule 22 (term -> term DIVIDE factor .)
    FAZ             reduce using rule 22 (term -> term DIVIDE factor .)
    PONTOVIRGULA    reduce using rule 22 (term -> term DIVIDE factor .)
    )               reduce using rule 22 (term -> term DIVIDE factor .)
    ASPAS           reduce using rule 22 (term -> term DIVIDE factor .)


state 47

    (24) factor -> ( expression ) .

    TIMES           reduce using rule 24 (factor -> ( expression ) .)
    DIVIDE          reduce using rule 24 (factor -> ( expression ) .)
    PLUS            reduce using rule 24 (factor -> ( expression ) .)
    MINUS           reduce using rule 24 (factor -> ( expression ) .)
    ENTAO           reduce using rule 24 (factor -> ( expression ) .)
    FAZ             reduce using rule 24 (factor -> ( expression ) .)
    PONTOVIRGULA    reduce using rule 24 (factor -> ( expression ) .)
    )               reduce using rule 24 (factor -> ( expression ) .)
    ASPAS           reduce using rule 24 (factor -> ( expression ) .)


state 48

    (15) while_statement -> ENQUANTO condition FAZ statements . FIM_ENQUANTO PONTOVIRGULA
    (5) statements -> statements . statement
    (7) statement -> . assignment
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . read_statement
    (11) statement -> . write_statement
    (12) assignment -> . ID IGUAL expression PONTOVIRGULA
    (14) if_statement -> . SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
    (15) while_statement -> . ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
    (16) read_statement -> . INPUT ID PONTOVIRGULA
    (17) write_statement -> . IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    FIM_ENQUANTO    shift and go to state 51
    ID              shift and go to state 14
    SE              shift and go to state 15
    ENQUANTO        shift and go to state 16
    INPUT           shift and go to state 17
    IMPRIMIR        shift and go to state 18

    statement                      shift and go to state 8
    assignment                     shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    read_statement                 shift and go to state 12
    write_statement                shift and go to state 13

state 49

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression . ASPAS VIRGULA ID RPAREN PONTOVIRGULA
    (18) expression -> expression . PLUS term
    (19) expression -> expression . MINUS term

    ASPAS           shift and go to state 52
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 50

    (14) if_statement -> SE condition ENTAO statements SENAO . statements FIM_COND PONTOVIRGULA
    (5) statements -> . statements statement
    (6) statements -> . empty
    (27) empty -> .

    FIM_COND        reduce using rule 27 (empty -> .)
    ID              reduce using rule 27 (empty -> .)
    SE              reduce using rule 27 (empty -> .)
    ENQUANTO        reduce using rule 27 (empty -> .)
    INPUT           reduce using rule 27 (empty -> .)
    IMPRIMIR        reduce using rule 27 (empty -> .)

    statements                     shift and go to state 53
    empty                          shift and go to state 6

state 51

    (15) while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 54


state 52

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS . VIRGULA ID RPAREN PONTOVIRGULA

    VIRGULA         shift and go to state 55


state 53

    (14) if_statement -> SE condition ENTAO statements SENAO statements . FIM_COND PONTOVIRGULA
    (5) statements -> statements . statement
    (7) statement -> . assignment
    (8) statement -> . if_statement
    (9) statement -> . while_statement
    (10) statement -> . read_statement
    (11) statement -> . write_statement
    (12) assignment -> . ID IGUAL expression PONTOVIRGULA
    (14) if_statement -> . SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA
    (15) while_statement -> . ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA
    (16) read_statement -> . INPUT ID PONTOVIRGULA
    (17) write_statement -> . IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA

    FIM_COND        shift and go to state 56
    ID              shift and go to state 14
    SE              shift and go to state 15
    ENQUANTO        shift and go to state 16
    INPUT           shift and go to state 17
    IMPRIMIR        shift and go to state 18

    statement                      shift and go to state 8
    assignment                     shift and go to state 9
    if_statement                   shift and go to state 10
    while_statement                shift and go to state 11
    read_statement                 shift and go to state 12
    write_statement                shift and go to state 13

state 54

    (15) while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .

    ID              reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    SE              reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    ENQUANTO        reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    INPUT           reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    $end            reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    SENAO           reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    FIM_ENQUANTO    reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)
    FIM_COND        reduce using rule 15 (while_statement -> ENQUANTO condition FAZ statements FIM_ENQUANTO PONTOVIRGULA .)


state 55

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA . ID RPAREN PONTOVIRGULA

    ID              shift and go to state 57


state 56

    (14) if_statement -> SE condition ENTAO statements SENAO statements FIM_COND . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 58


state 57

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID . RPAREN PONTOVIRGULA

    RPAREN          shift and go to state 59


state 58

    (14) if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .

    ID              reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    SE              reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    ENQUANTO        reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    INPUT           reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    $end            reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    SENAO           reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    FIM_ENQUANTO    reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)
    FIM_COND        reduce using rule 14 (if_statement -> SE condition ENTAO statements SENAO statements FIM_COND PONTOVIRGULA .)


state 59

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN . PONTOVIRGULA

    PONTOVIRGULA    shift and go to state 60


state 60

    (17) write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .

    ID              reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    SE              reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    ENQUANTO        reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    INPUT           reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    IMPRIMIR        reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    $end            reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    SENAO           reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    FIM_ENQUANTO    reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)
    FIM_COND        reduce using rule 17 (write_statement -> IMPRIMIR LPAREN ASPAS expression ASPAS VIRGULA ID RPAREN PONTOVIRGULA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
